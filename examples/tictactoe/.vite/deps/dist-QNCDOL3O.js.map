{
  "version": 3,
  "sources": ["../../node_modules/.pnpm/@safe-global+safe-apps-provider@0.18.3_bufferutil@4.0.8_typescript@5.6.2_utf-8-validate@5.0.10/node_modules/@safe-global/safe-apps-provider/src/utils.ts", "../../node_modules/.pnpm/@safe-global+safe-apps-provider@0.18.3_bufferutil@4.0.8_typescript@5.6.2_utf-8-validate@5.0.10/node_modules/@safe-global/safe-apps-provider/src/provider.ts", "../../node_modules/.pnpm/@safe-global+safe-apps-provider@0.18.3_bufferutil@4.0.8_typescript@5.6.2_utf-8-validate@5.0.10/node_modules/@safe-global/safe-apps-provider/src/index.ts"],
  "sourcesContent": ["export function getLowerCase(value: string): string {\n  if (value) {\n    return value.toLowerCase();\n  }\n  return value;\n}\n", "import SafeAppsSDK, { SafeInfo, Web3TransactionObject } from '@safe-global/safe-apps-sdk';\nimport { EventEmitter } from 'events';\nimport { EIP1193Provider } from './types';\nimport { getLowerCase } from './utils';\n\n// The API is based on Ethereum JavaScript API Provider Standard. Link: https://eips.ethereum.org/EIPS/eip-1193\nexport class SafeAppProvider extends EventEmitter implements EIP1193Provider {\n  private readonly safe: SafeInfo;\n  private readonly sdk: SafeAppsSDK;\n  private submittedTxs = new Map<string, Web3TransactionObject>();\n\n  constructor(safe: SafeInfo, sdk: SafeAppsSDK) {\n    super();\n    this.safe = safe;\n    this.sdk = sdk;\n  }\n\n  async connect(): Promise<void> {\n    this.emit('connect', { chainId: this.chainId });\n    return;\n  }\n\n  async disconnect(): Promise<void> {\n    return;\n  }\n\n  public get chainId(): number {\n    return this.safe.chainId;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  async request(request: { method: string; params?: any[] }): Promise<any> {\n    const { method, params = [] } = request;\n\n    switch (method) {\n      case 'eth_accounts':\n        return [this.safe.safeAddress];\n\n      case 'net_version':\n      case 'eth_chainId':\n        return `0x${this.chainId.toString(16)}`;\n\n      case 'personal_sign': {\n        const [message, address] = params;\n\n        if (this.safe.safeAddress.toLowerCase() !== address.toLowerCase()) {\n          throw new Error('The address or message hash is invalid');\n        }\n\n        const response = await this.sdk.txs.signMessage(message);\n        const signature = 'signature' in response ? response.signature : undefined;\n\n        return signature || '0x';\n      }\n\n      case 'eth_sign': {\n        const [address, messageHash] = params;\n\n        if (this.safe.safeAddress.toLowerCase() !== address.toLowerCase() || !messageHash.startsWith('0x')) {\n          throw new Error('The address or message hash is invalid');\n        }\n\n        const response = await this.sdk.txs.signMessage(messageHash);\n        const signature = 'signature' in response ? response.signature : undefined;\n\n        return signature || '0x';\n      }\n\n      case 'eth_signTypedData':\n      case 'eth_signTypedData_v4': {\n        const [address, typedData] = params;\n        const parsedTypedData = typeof typedData === 'string' ? JSON.parse(typedData) : typedData;\n\n        if (this.safe.safeAddress.toLowerCase() !== address.toLowerCase()) {\n          throw new Error('The address is invalid');\n        }\n\n        const response = await this.sdk.txs.signTypedMessage(parsedTypedData);\n        const signature = 'signature' in response ? response.signature : undefined;\n        return signature || '0x';\n      }\n\n      case 'eth_sendTransaction':\n        // `value` or `data` can be explicitly set as `undefined` for example in Viem. The spread will overwrite the fallback value.\n        const tx = {\n          ...params[0],\n          value: params[0].value || '0',\n          data: params[0].data || '0x',\n        };\n\n        // Some ethereum libraries might pass the gas as a hex-encoded string\n        // We need to convert it to a number because the SDK expects a number and our backend only supports\n        // Decimal numbers\n        if (typeof tx.gas === 'string' && tx.gas.startsWith('0x')) {\n          tx.gas = parseInt(tx.gas, 16);\n        }\n\n        const resp = await this.sdk.txs.send({\n          txs: [tx],\n          params: { safeTxGas: tx.gas },\n        });\n\n        // Store fake transaction\n        this.submittedTxs.set(resp.safeTxHash, {\n          from: this.safe.safeAddress,\n          hash: resp.safeTxHash,\n          gas: 0,\n          gasPrice: '0x00',\n          nonce: 0,\n          input: tx.data,\n          value: tx.value,\n          to: tx.to,\n          blockHash: null,\n          blockNumber: null,\n          transactionIndex: null,\n        });\n        return resp.safeTxHash;\n\n      case 'eth_blockNumber':\n        const block = await this.sdk.eth.getBlockByNumber(['latest']);\n\n        return block.number;\n\n      case 'eth_getBalance':\n        return this.sdk.eth.getBalance([getLowerCase(params[0]), params[1]]);\n\n      case 'eth_getCode':\n        return this.sdk.eth.getCode([getLowerCase(params[0]), params[1]]);\n\n      case 'eth_getTransactionCount':\n        return this.sdk.eth.getTransactionCount([getLowerCase(params[0]), params[1]]);\n\n      case 'eth_getStorageAt':\n        return this.sdk.eth.getStorageAt([getLowerCase(params[0]), params[1], params[2]]);\n\n      case 'eth_getBlockByNumber':\n        return this.sdk.eth.getBlockByNumber([params[0], params[1]]);\n\n      case 'eth_getBlockByHash':\n        return this.sdk.eth.getBlockByHash([params[0], params[1]]);\n\n      case 'eth_getTransactionByHash':\n        let txHash = params[0];\n        try {\n          const resp = await this.sdk.txs.getBySafeTxHash(txHash);\n          txHash = resp.txHash || txHash;\n        } catch (e) {}\n        // Use fake transaction if we don't have a real tx hash\n        if (this.submittedTxs.has(txHash)) {\n          return this.submittedTxs.get(txHash);\n        }\n        return this.sdk.eth.getTransactionByHash([txHash]).then((tx) => {\n          // We set the tx hash to the one requested, as some provider assert this\n          if (tx) {\n            tx.hash = params[0];\n          }\n          return tx;\n        });\n\n      case 'eth_getTransactionReceipt': {\n        let txHash = params[0];\n        try {\n          const resp = await this.sdk.txs.getBySafeTxHash(txHash);\n          txHash = resp.txHash || txHash;\n        } catch (e) {}\n        return this.sdk.eth.getTransactionReceipt([txHash]).then((tx) => {\n          // We set the tx hash to the one requested, as some provider assert this\n          if (tx) {\n            tx.transactionHash = params[0];\n          }\n          return tx;\n        });\n      }\n\n      case 'eth_estimateGas': {\n        return this.sdk.eth.getEstimateGas(params[0]);\n      }\n\n      case 'eth_call': {\n        return this.sdk.eth.call([params[0], params[1]]);\n      }\n\n      case 'eth_getLogs':\n        return this.sdk.eth.getPastLogs([params[0]]);\n\n      case 'eth_gasPrice':\n        return this.sdk.eth.getGasPrice();\n\n      case 'wallet_getPermissions':\n        return this.sdk.wallet.getPermissions();\n\n      case 'wallet_requestPermissions':\n        return this.sdk.wallet.requestPermissions(params[0]);\n\n      case 'safe_setSettings':\n        return this.sdk.eth.setSafeSettings([params[0]]);\n\n      default:\n        throw Error(`\"${request.method}\" not implemented`);\n    }\n  }\n\n  // this method is needed for ethers v4\n  // https://github.com/ethers-io/ethers.js/blob/427e16826eb15d52d25c4f01027f8db22b74b76c/src.ts/providers/web3-provider.ts#L41-L55\n  send(request: any, callback: (error: any, response?: any) => void): void {\n    if (!request) callback('Undefined request');\n    this.request(request)\n      .then((result) => callback(null, { jsonrpc: '2.0', id: request.id, result }))\n      .catch((error) => callback(error, null));\n  }\n}\n", "export { SafeAppProvider } from './provider';\n"],
  "mappings": "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",
  "names": ["resp", "tx", "txHash"]
}

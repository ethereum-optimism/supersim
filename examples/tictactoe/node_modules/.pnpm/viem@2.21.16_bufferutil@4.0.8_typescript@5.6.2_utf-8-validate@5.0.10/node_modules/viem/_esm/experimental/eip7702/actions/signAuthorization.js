import { parseAccount, } from '../../../accounts/utils/parseAccount.js';
import { getChainId } from '../../../actions/public/getChainId.js';
import { getTransactionCount } from '../../../actions/public/getTransactionCount.js';
import { AccountNotFoundError, AccountTypeNotSupportedError, } from '../../../errors/account.js';
import { isAddressEqual } from '../../../utils/address/isAddressEqual.js';
import { getAction } from '../../../utils/getAction.js';
/**
 * Signs an [EIP-7702 Authorization](https://eips.ethereum.org/EIPS/eip-7702) object.
 *
 * With the calculated signature, you can:
 * - use [`verifyAuthorization`](https://viem.sh/experimental/eip7702/verifyAuthorization) to verify the signed Authorization object,
 * - use [`recoverAuthorizationAddress`](https://viem.sh/experimental/eip7702/recoverAuthorizationAddress) to recover the signing address from the signed Authorization object.
 *
 * @param client - Client to use
 * @param parameters - {@link SignAuthorizationParameters}
 * @returns The signed Authorization object. {@link SignAuthorizationReturnType}
 *
 * @example
 * import { createClient, http } from 'viem'
 * import { privateKeyToAccount } from 'viem/accounts'
 * import { mainnet } from 'viem/chains'
 * import { signAuthorization } from 'viem/experimental'
 *
 * const client = createClient({
 *   chain: mainnet,
 *   transport: http(),
 * })
 * const signature = await signAuthorization(client, {
 *   account: privateKeyToAccount('0x..'),
 *   contractAddress: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',
 * })
 *
 * @example
 * // Account Hoisting
 * import { createClient, http } from 'viem'
 * import { privateKeyToAccount } from 'viem/accounts'
 * import { mainnet } from 'viem/chains'
 * import { signAuthorization } from 'viem/experimental'
 *
 * const client = createClient({
 *   account: privateKeyToAccount('0xâ€¦'),
 *   chain: mainnet,
 *   transport: http(),
 * })
 * const signature = await signAuthorization(client, {
 *   contractAddress: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',
 * })
 */
export async function signAuthorization(client, parameters) {
    const { account: account_ = client.account, contractAddress, chainId, nonce, delegate: delegate_, } = parameters;
    if (!account_)
        throw new AccountNotFoundError({
            docsPath: '/experimental/eip7702/signAuthorization',
        });
    const account = parseAccount(account_);
    const delegate = delegate_ ? parseAccount(delegate_) : undefined;
    if (!account.experimental_signAuthorization)
        throw new AccountTypeNotSupportedError({
            docsPath: '/experimental/eip7702/signAuthorization',
            metaMessages: [
                'The `signAuthorization` Action does not support JSON-RPC Accounts.',
            ],
            type: account.type,
        });
    const authorization = {
        contractAddress,
        chainId,
        nonce,
    };
    if (typeof authorization.chainId === 'undefined')
        authorization.chainId =
            client.chain?.id ??
                (await getAction(client, getChainId, 'getChainId')({}));
    if (typeof authorization.nonce === 'undefined') {
        authorization.nonce = await getAction(client, getTransactionCount, 'getTransactionCount')({
            address: account.address,
            blockTag: 'pending',
        });
        if (!delegate || isAddressEqual(account.address, delegate.address))
            authorization.nonce += 1;
    }
    return account.experimental_signAuthorization(authorization);
}
//# sourceMappingURL=signAuthorization.js.map